{"version":3,"sources":["Profile/changePassword.module.css","Profile/ChangePassword.js"],"names":["module","exports","ChangePassword","navigate","useNavigate","useState","isThereError","setIsThereError","errorMessage","setErrorMessage","isSuccess","setIsSuccess","successMessage","setSuccessMessage","toggleEyeIcon1","setToggleEyeIcon1","toggleEyeIcon2","setToggleEyeIcon2","passwordInputRef1","useRef","passwordInputRef2","authCtx","useContext","AuthContext","getUserData","passwordHash","userData","token","displayName","isVerified","emailVerified","console","log","validatePassword","enteredPassword","enteredPassword2","test","togglePassword1Input","passwordInput","document","getElementById","type","togglePassword2Input","changePassword","apiURL","newPassword","fetch","method","body","JSON","stringify","idToken","password","returnSecureToken","headers","response","ok","Error","json","data","error","message","login","email","onSubmitHanlder","event","preventDefault","enteredPassword1","current","value","logout","setTimeout","className","styles","changePasswordWrapper","changePasswordContainer","changePasswordHeader","title","onSubmit","htmlFor","inputPass","id","ref","onClick","eyeIcon"],"mappings":"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","file":"static/js/17.23b6ab53.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"changePasswordWrapper\":\"changePassword_changePasswordWrapper__2P-5g\",\"changePasswordHeader\":\"changePassword_changePasswordHeader__3UiW0\",\"title\":\"changePassword_title__1nOde\",\"inputPass\":\"changePassword_inputPass__24dMX\",\"eyeIcon\":\"changePassword_eyeIcon__uYlIJ\"};","import React, { useRef, useState, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport styles from \"./changePassword.module.css\";\nimport AuthContext from \"../Components/Store/Auth-Context\";\n\nfunction ChangePassword() {\n  const navigate = useNavigate();\n  // Handling feedbacks\n  const [isThereError, setIsThereError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n\n  // Toggle eye icon state\n  const [toggleEyeIcon1, setToggleEyeIcon1] = useState(false);\n  const [toggleEyeIcon2, setToggleEyeIcon2] = useState(false);\n\n  // Getting the input values\n  const passwordInputRef1 = useRef();\n  const passwordInputRef2 = useRef();\n\n  // getting the user data from the context\n  const authCtx = useContext(AuthContext);\n  const oldPasswordHash = authCtx.getUserData().passwordHash;\n  const [newPasswordHash, setNewPasswordHash] = useState(\"\");\n\n  // get the old password\n  const userData = authCtx.getUserData();\n  const token = authCtx.token;\n  const displayName = authCtx.displayName;\n  const isVerified = authCtx.emailVerified;\n\n  console.log(\"userData\", userData);\n\n  // Function to validate the password\n  const validatePassword = (enteredPassword, enteredPassword2) => {\n    return /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$/.test(\n      enteredPassword,\n      enteredPassword2\n    );\n  };\n\n  // Function to toggle the password input\n  const togglePassword1Input = () => {\n    setToggleEyeIcon1(!toggleEyeIcon1);\n    const passwordInput = document.getElementById(\"password1\");\n    if (passwordInput.type === \"password\") {\n      passwordInput.type = \"text\";\n    } else if (passwordInput.type === \"text\") {\n      passwordInput.type = \"password\";\n    }\n  };\n  const togglePassword2Input = () => {\n    setToggleEyeIcon2(!toggleEyeIcon2);\n    const passwordInput = document.getElementById(\"password2\");\n    if (passwordInput.type === \"password\") {\n      passwordInput.type = \"text\";\n    } else if (passwordInput.type === \"text\") {\n      passwordInput.type = \"password\";\n    }\n  };\n\n  const changePasswordApiURL =\n    \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyDNDXcfx6jpm5Y_121TikxsU7-Yx2ZrmeQ\";\n  // Function to change the password\n  /*\n  const changePassword = async (apiURL, newPassword) => {\n    try {\n      const response = await fetch(apiURL, {\n        method: \"POST\",\n        body: JSON.stringify({\n          idToken: token,\n          password: newPassword,\n          returnSecureToken: true,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      console.log(\"Change Password response\", response);\n      if (!response.ok) {\n        setIsThereError(true);\n        setIsSuccess(false);\n        throw new Error(\"Password change failed! Please try again\");\n      }\n      const data = await response.json();\n      // set the new password hash\n      setNewPasswordHash(data.passwordHash);\n      // Check if the new password is different from the old password\n      if (newPasswordHash === oldPasswordHash) {\n        setIsThereError(true);\n        setIsSuccess(false);\n        setErrorMessage(\n          \"New password must be different from the old password!\"\n        );\n        return;\n      } else if (!data) {\n        setIsThereError(true);\n        setIsSuccess(false);\n        throw new Error(\"Password change failed! Please try again\");\n      } else if (data.error) {\n        setIsThereError(true);\n        setIsSuccess(false);\n        setErrorMessage(data.error.message);\n      } else if (data) {\n        setIsThereError(false);\n        setIsSuccess(true);\n        setSuccessMessage(\"Password changed successfully\");\n\n        // update the user data in the context\n        authCtx.login(data.idToken, data.email, displayName, isVerified);\n      }\n    } catch (error) {\n      console.log(\"Error\", error);\n      setIsThereError(true);\n      setIsSuccess(false);\n      setErrorMessage(error.message);\n    }\n  };\n  */\n\n  const changePassword = async (apiURL, newPassword) => {\n    try {\n      const response = await fetch(apiURL, {\n        method: \"POST\",\n        body: JSON.stringify({\n          idToken: token,\n          password: newPassword,\n          returnSecureToken: true,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      console.log(\"Change Password response\", response);\n      if (!response.ok) {\n        setIsThereError(true);\n        setIsSuccess(false);\n        throw new Error(\"Password change failed! Please try again\");\n      }\n      const data = await response.json();\n      if (!data) {\n        setIsThereError(true);\n        setIsSuccess(false);\n        throw new Error(\"Password change failed! Please try again\");\n      } else if (data.error) {\n        setIsThereError(true);\n        setIsSuccess(false);\n        throw new Error(data.error.message);\n      } else {\n        setIsSuccess(true);\n        setSuccessMessage(\"Password changed successfully!\");\n        setIsThereError(false);\n        authCtx.login(data.idToken, data.email, displayName, isVerified);\n      }\n    } catch (error) {\n      console.log(error);\n      setIsThereError(true);\n      setErrorMessage(error.message);\n      setIsSuccess(false);\n    }\n  };\n\n  // On Submit Handler\n  const onSubmitHanlder = async (event) => {\n    event.preventDefault();\n    // Getting the input values\n    const enteredPassword1 = passwordInputRef1.current.value;\n    const enteredPassword2 = passwordInputRef2.current.value;\n\n    // Check if the passwords are valid\n    if (enteredPassword1 !== enteredPassword2) {\n      setIsThereError(true);\n      setIsSuccess(false);\n      setErrorMessage(\"Passwords do not match\");\n      return;\n    } else if (\n      !validatePassword(\n        passwordInputRef1.current.value,\n        passwordInputRef2.current.value\n      )\n    ) {\n      setIsThereError(true);\n      setErrorMessage(\n        \"The password must contain at least 8 characters, including at least one uppercase letter, one lowercase letter, one number, and one special character\"\n      );\n      return;\n    } else {\n      setIsThereError(false);\n      setIsSuccess(true);\n      setSuccessMessage(\"Password changed successfully\");\n    }\n\n    // Change the password\n    await changePassword(changePasswordApiURL, enteredPassword1);\n    // Logging the user out and navigate to login page\n    authCtx.logout();\n    setTimeout(() => {\n      navigate(\"/login\");\n    }, 2000);\n\n    // Resetting the form\n    passwordInputRef1.current.value = \"\";\n    passwordInputRef2.current.value = \"\";\n  };\n\n  return (\n    <div className={styles.changePasswordWrapper}>\n      <div className={styles.changePasswordContainer}>\n        <div className={styles.changePasswordHeader}>\n          <h1 className={styles.title}>Change Password</h1>\n          <p className=\"clarify\">\n            Your new password must be different from your previous used password\n          </p>\n        </div>\n        <form onSubmit={onSubmitHanlder}>\n          <div className=\"formControl\">\n            <label className=\"inputLabel\" htmlFor=\"password1\">\n              New Password\n            </label>\n            <div className={styles.inputPass}>\n              <input\n                className=\"inputField\"\n                type=\"password\"\n                id=\"password1\"\n                ref={passwordInputRef1}\n              />\n              {toggleEyeIcon1 && (\n                <i\n                  onClick={togglePassword1Input}\n                  className={`fa-solid fa-eye ${styles.eyeIcon}`}\n                ></i>\n              )}\n              {!toggleEyeIcon1 && (\n                <i\n                  onClick={togglePassword1Input}\n                  className={`fa-solid fa-eye-slash  ${styles.eyeIcon}`}\n                ></i>\n              )}\n            </div>\n          </div>\n          <div className=\"formControl\">\n            <label className=\"inputLabel\" htmlFor=\"password2\">\n              Confirm New Password\n            </label>\n            <div className={styles.inputPass}>\n              <input\n                className=\"inputField\"\n                type=\"password\"\n                id=\"password2\"\n                ref={passwordInputRef2}\n              />\n              {toggleEyeIcon2 && (\n                <i\n                  onClick={togglePassword2Input}\n                  className={`fa-solid fa-eye ${styles.eyeIcon}`}\n                ></i>\n              )}\n              {!toggleEyeIcon2 && (\n                <i\n                  onClick={togglePassword2Input}\n                  className={`fa-solid fa-eye-slash  ${styles.eyeIcon}`}\n                ></i>\n              )}\n\n              <span className=\"span-clarify\">\n                Minimum eight characters, at least one upper case English\n                letter, one lower case English letter, one number and one\n                special character.\n              </span>\n            </div>\n          </div>\n\n          {/* HANDLING FEEDBACKS */}\n          {isThereError && (\n            <div className=\"errorMessage\">\n              <ul className=\"errorMsgList\">\n                <li> {errorMessage} </li>\n              </ul>\n            </div>\n          )}\n          {isSuccess && (\n            <div className=\"successMessage\">\n              <ul className=\"successMsgList\">\n                <li> {successMessage} </li>\n              </ul>\n            </div>\n          )}\n\n          <button className=\"btnSubmit\">Submit</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default ChangePassword;\n"],"sourceRoot":""}