{"version":3,"sources":["Profile/userprofile.module.css","Profile/User-Profile.js"],"names":["module","exports","UserProfile","useState","userData","setUserData","authCtx","useContext","authContext","userToken","token","emailVerificationStatus","setEmailVerificationStatus","console","log","VerficationStatusMessage","loadedUsers","setLoadedUsers","useEffect","getUserData","url","fetch","response","ok","Error","json","key","data","push","id","email","firstName","lastName","emailVerified","method","body","JSON","stringify","idToken","headers","users","setUserInfo","localStorage","setItem","sendEmailVerificationLink","requestType","className","styles","profileWrapper","profileContainer","profileHeader","title","emailContainer","emailInfo","profileInfoWrapper","orderHistoryWrapper","orderHistoryTitle","orderTitle","userInfo","userInfoTitle","displayName","isEmailVerfiedContainer","emailVerficationInfo","emailTitle","emailNotVerfied","emailVerfied","emailActions","changeActionDiv","onClick","to","emailActionBtn"],"mappings":"wHACAA,EAAOC,QAAU,CAAC,eAAiB,oCAAoC,iBAAmB,sCAAsC,cAAgB,mCAAmC,MAAQ,2BAA2B,eAAiB,oCAAoC,UAAY,+BAA+B,mBAAqB,wCAAwC,oBAAsB,yCAAyC,SAAW,8BAA8B,kBAAoB,uCAAuC,cAAgB,mCAAmC,WAAa,gCAAgC,YAAc,iCAAiC,wBAA0B,6CAA6C,qBAAuB,0CAA0C,gBAAkB,qCAAqC,aAAe,kCAAkC,aAAe,kCAAkC,gBAAkB,qCAAqC,eAAiB,oC,kHC2L//BC,UAvLK,WAElB,MAAgCC,mBAAS,CAAC,GAAE,mBAArCC,EAAQ,KAAEC,EAAW,KAEtBC,EAAUC,qBAAWC,KAErBC,EAAYH,EAAQI,MAI1B,EAA8DP,oBAAS,GAAM,mBAAtEQ,EAAuB,KAAEC,EAA0B,KAC1DC,QAAQC,IAAI,0BAA0BH,GACtC,MAAgER,mBAAS,IAAG,mBAArEY,EAAwB,KAA6B,KAC5DF,QAAQC,IAAI,2BAA2BC,GAQvC,MAAsCZ,mBAAS,IAAG,mBAA3Ca,EAAW,KAAEC,EAAc,KAGlCC,qBAAU,WACR,IAAMC,EAAW,iDAAG,WAAOC,GAAG,uGACLC,MAAMD,GAAK,KAAD,EAAnB,IAARE,EAAQ,QACAC,GAAG,CAAD,qBACR,IAAIC,MAAM,qDAAqD,KAAD,kBAEnDF,EAASG,OAAO,KAAD,EAElC,IAAWC,KAFLC,EAAI,OACJX,EAAc,GACFW,EAChBX,EAAYY,KAAK,CACfC,GAAIH,EACJI,MAAOH,EAAKD,GAAKI,MACjBC,UAAWJ,EAAKD,GAAKK,UACrBC,SAAUL,EAAKD,GAAKM,SACpBC,cAAeN,EAAKD,GAAKO,gBAG7BhB,EAAeD,GAAa,4CAC7B,gBAjBgB,sCAkBjBG,EApBA,sEAqBF,GAAG,IACHN,QAAQC,IAAI,uCAAwCE,GAOpDE,qBAAU,WACR,IAAMC,EAAW,iDAAG,kHACKE,MALzB,wGAKuC,CACnCa,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,QAAS7B,IAEX8B,QAAS,CAAE,eAAgB,sBAC1B,KAAD,EANY,IAARjB,EAAQ,QAOAC,GAAG,CAAD,qBACR,IAAIC,MAAM,qDAAqD,KAAD,kBAEnDF,EAASG,OAAO,KAAD,GAA5BE,EAAI,SAIRtB,EAAYsB,EAAKa,MAAM,IAEvBlC,EAAQmC,YAAYd,EAAKa,MAAM,IAE/BE,aAAaC,QAAQ,WAAYP,KAAKC,UAAUV,EAAKa,MAAM,KAE3DE,aAAaC,QAAQ,gBAAiBhB,EAAKa,MAAM,GAAGP,eACpDrB,EAA+B,OAAJe,QAAI,IAAJA,GAAc,QAAV,EAAJA,EAAMa,MAAM,UAAE,WAAV,EAAJ,EAAgBP,gBACjCN,GACVd,QAAQC,IAAI,iBACb,2CACF,kBA1BgB,mCA2BjBK,GACF,GAAG,IAGH,IAEMyB,EAAyB,iDAAG,gHACTvB,MAFvB,6GAEuD,CACrDa,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBQ,YAAa,eACbP,QAAS7B,IAEX8B,QAAS,CAAE,eAAgB,sBAC1B,KAAD,EACkD,GAR9CjB,EAAQ,OAQdT,QAAQC,IAAI,6BAA8BQ,GACrCA,EAASC,GAAG,CAAD,qBACR,IAAIC,MACR,sFACA,KAAD,kBAEgBF,EAASG,OAAO,KAAD,EAA5BE,EAAI,OACVd,QAAQC,IAAI,yBAA0Ba,GAAM,4CAC7C,kBAjB8B,mCAoB/B,OADAd,QAAQC,IAAI,WAAYV,GAEtB,yBAAS0C,UAAWC,IAAOC,eAAe,SACxC,sBAAKF,UAAWC,IAAOE,iBAAiB,UACtC,sBAAKH,UAAWC,IAAOG,cAAc,UACnC,oBAAIJ,UAAWC,IAAOI,MAAM,wBAC5B,qBAAKL,UAAWC,IAAOK,eAAe,SACpC,qBAAKN,UAAWC,IAAOM,UAAU,SAC/B,mBAAGP,UAAWC,IAAOjB,MAAM,SAAE1B,EAAS0B,eAQ5C,sBAAKgB,UAAWC,IAAOO,mBAAmB,UACxC,sBAAKR,UAAWC,IAAOQ,oBAAoB,UACzC,oBAAIT,UAAWC,IAAOS,kBAAkB,2BACxC,mBAAGV,UAAWC,IAAOU,WAAW,oDAKlC,sBAAKX,UAAWC,IAAOW,SAAS,UAC9B,oBAAIZ,UAAWC,IAAOY,cAAc,6BACpC,oBAAGb,UAAWC,IAAOa,YAAY,cAAGxD,EAASwD,eAE7C,qBAAKd,UAAWC,IAAOc,wBAAwB,SAC7C,sBAAKf,UAAWC,IAAOe,qBAAqB,UAC1C,mBAAGhB,UAAWC,IAAOgB,WAAW,iCAG9BpD,GACA,mBAAGmC,UAAWC,IAAOiB,gBAAgB,yBAEtCrD,GACC,mBAAGmC,UAAWC,IAAOkB,aAAa,0BAKxC,sBAAKnB,UAAWC,IAAOmB,aAAa,WAEhCvD,GACA,qBAAKmC,UAAWC,IAAOoB,gBAAgB,SACrC,cAAC,OAAI,CACHC,QAASxB,EACTyB,GAAG,eACHvB,UAAWC,IAAOuB,eAAe,4BAMvC,qBAAKxB,UAAWC,IAAOoB,gBAAgB,SACrC,cAAC,OAAI,CAACE,GAAG,eAAevB,UAAWC,IAAOuB,eAAe,4BAI3D,qBAAKxB,UAAWC,IAAOoB,gBAAgB,SACrC,cAAC,OAAI,CAACE,GAAG,kBAAkBvB,UAAWC,IAAOuB,eAAe,+BAI9D,qBAAKxB,UAAWC,IAAOoB,gBAAgB,SACrC,cAAC,OAAI,CAACE,GAAG,cAAcvB,UAAWC,IAAOuB,eAAe,wCAUxE,C","file":"static/js/22.0fbb72f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileWrapper\":\"userprofile_profileWrapper__1WXjP\",\"profileContainer\":\"userprofile_profileContainer__EPef_\",\"profileHeader\":\"userprofile_profileHeader__3mAb-\",\"title\":\"userprofile_title__2t5FK\",\"emailContainer\":\"userprofile_emailContainer__3wMxr\",\"emailInfo\":\"userprofile_emailInfo__2kWbw\",\"profileInfoWrapper\":\"userprofile_profileInfoWrapper__1sZJg\",\"orderHistoryWrapper\":\"userprofile_orderHistoryWrapper__3qQDg\",\"userInfo\":\"userprofile_userInfo__5UmV_\",\"orderHistoryTitle\":\"userprofile_orderHistoryTitle__3PRHN\",\"userInfoTitle\":\"userprofile_userInfoTitle__3tNNq\",\"orderTitle\":\"userprofile_orderTitle__3SGJJ\",\"displayName\":\"userprofile_displayName__1fBdO\",\"isEmailVerfiedContainer\":\"userprofile_isEmailVerfiedContainer__2qTtM\",\"emailVerficationInfo\":\"userprofile_emailVerficationInfo__2SqZj\",\"emailNotVerfied\":\"userprofile_emailNotVerfied__2-aE8\",\"emailVerfied\":\"userprofile_emailVerfied__3QfEI\",\"emailActions\":\"userprofile_emailActions__1TzbT\",\"changeActionDiv\":\"userprofile_changeActionDiv__1yRRW\",\"emailActionBtn\":\"userprofile_emailActionBtn__3FSj8\"};","import React, { useRef, useState, useContext, useEffect } from \"react\";\nimport authContext from \"../Components/Store/Auth-Context\";\nimport styles from \"./userprofile.module.css\";\nimport { Link } from \"react-router-dom\";\n \nconst UserProfile = () => {\n  // use state to store the user data\n  const [userData, setUserData] = useState({});\n  // get the user token from authContext\n  const authCtx = useContext(authContext);\n  // const userDisplayName = authCtx.displayName;\n  const userToken = authCtx.token;\n\n\n  // get the email from local storage\n  const [emailVerificationStatus, setEmailVerificationStatus] = useState(false);\n  console.log('emailVerificationStatus',emailVerificationStatus)\n  const [VerficationStatusMessage, setVerficationStatusMessage] = useState(\"\");\n  console.log('VerficationStatusMessage',VerficationStatusMessage)\n\n\n\n \n\n  // get user display name from realtime database and set it in the user data state\n  // condition if the userdata email is equal to the email from user\n  const [loadedUsers, setLoadedUsers] = useState([]);\n  const getUserAPiURL =\n    \" https://react-http-products-default-rtdb.firebaseio.com/users.json\";\n  useEffect(() => {\n    const getUserData = async (url) => {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(\"Something went wrong while getting the user data!\");\n      }\n      const data = await response.json();\n      const loadedUsers = [];\n      for (const key in data) {\n        loadedUsers.push({\n          id: key,\n          email: data[key].email,\n          firstName: data[key].firstName,\n          lastName: data[key].lastName,\n          emailVerified: data[key].emailVerified,\n        });\n      }\n      setLoadedUsers(loadedUsers);\n    };\n    getUserData(getUserAPiURL);\n  }, []);\n  console.log(\"loaded users from real time database\", loadedUsers);\n\n  // get the user data from Firebase\n  const APIURL =\n    \"https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=AIzaSyDNDXcfx6jpm5Y_121TikxsU7-Yx2ZrmeQ\";\n\n  // useEffect to get the user data\n  useEffect(() => {\n    const getUserData = async () => {\n      const response = await fetch(APIURL, {\n        method: \"POST\",\n        body: JSON.stringify({\n          idToken: userToken,\n        }),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) {\n        throw new Error(\"Something went wrong while getting the user data!\");\n      }\n      const data = await response.json();\n\n      if (data) {\n        // set the user data in the state\n        setUserData(data.users[0]);\n\n        authCtx.setUserInfo(data.users[0]);\n        // set the user data in the local storage\n        localStorage.setItem(\"userData\", JSON.stringify(data.users[0]));\n        // override emailVerifed property in Localstorage\n        localStorage.setItem(\"emailVerified\", data.users[0].emailVerified);\n        setEmailVerificationStatus(data?.users[0]?.emailVerified);\n      } else if (!data) {\n        console.log(\"No data Found\");\n      }\n    };\n    getUserData();\n  }, []);\n\n  // function handler to send email verification link\n  let emailVerificationAPILink =\n    \"https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode?key=AIzaSyDNDXcfx6jpm5Y_121TikxsU7-Yx2ZrmeQ\";\n  const sendEmailVerificationLink = async () => {\n    const response = await fetch(emailVerificationAPILink, {\n      method: \"POST\",\n      body: JSON.stringify({\n        requestType: \"VERIFY_EMAIL\",\n        idToken: userToken,\n      }),\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    console.log(\"Email Verfication Response\", response);\n    if (!response.ok) {\n      throw new Error(\n        \"Something went wrong while sending the email Verification! Plaease try again later\"\n      );\n    }\n    const data = await response.json();\n    console.log(\"Email Verfication Data\", data);\n  };\n\n  console.log(\"userData\", userData);\n  return (\n    <section className={styles.profileWrapper}>\n      <div className={styles.profileContainer}>\n        <div className={styles.profileHeader}>\n          <h1 className={styles.title}>My Account</h1>\n          <div className={styles.emailContainer}>\n            <div className={styles.emailInfo}>\n              <p className={styles.email}>{userData.email}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* ------- display the user data--------- */}\n\n        {/* ------- ORDER HISTORY -------------- */}\n        <div className={styles.profileInfoWrapper}>\n          <div className={styles.orderHistoryWrapper}>\n            <h2 className={styles.orderHistoryTitle}>Order History</h2>\n            <p className={styles.orderTitle}>\n              You have not placed any orders yet!\n            </p>\n          </div>\n          {/* ------- USER INFO -------------- */}\n          <div className={styles.userInfo}>\n            <h2 className={styles.userInfoTitle}>Account Details</h2>\n            <p className={styles.displayName}> {userData.displayName}</p>\n\n            <div className={styles.isEmailVerfiedContainer}>\n              <div className={styles.emailVerficationInfo}>\n                <p className={styles.emailTitle}>Email Verfication:</p>\n\n                \n                {!emailVerificationStatus && (\n                  <p className={styles.emailNotVerfied}>Not Verfied</p>\n                )}\n                {emailVerificationStatus && (\n                  <p className={styles.emailVerfied}>Verfied</p>\n                )}\n              </div>\n            </div>\n\n            <div className={styles.emailActions}>\n              {/* Show Verify Email Button only if the email is not verified */}\n              {!emailVerificationStatus && (\n                <div className={styles.changeActionDiv}>\n                  <Link\n                    onClick={sendEmailVerificationLink}\n                    to=\"/verifyEmail\"\n                    className={styles.emailActionBtn}\n                  >\n                    Verify Email\n                  </Link>\n                </div>\n              )}\n              <div className={styles.changeActionDiv}>\n                <Link to=\"/changeEmail\" className={styles.emailActionBtn}>\n                  Change Email\n                </Link>\n              </div>\n              <div className={styles.changeActionDiv}>\n                <Link to=\"/changePassword\" className={styles.emailActionBtn}>\n                  Change Password\n                </Link>\n              </div>\n              <div className={styles.changeActionDiv}>\n                <Link to=\"/addAddress\" className={styles.emailActionBtn}>\n                  Add Address\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default UserProfile;\n"],"sourceRoot":""}