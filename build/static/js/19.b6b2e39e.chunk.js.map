{"version":3,"sources":["Components/pages/confirmEmail.module.css","Components/pages/ConfirmEmail.js"],"names":["module","exports","ConfirmEmail","authCtx","useContext","authContext","oobCode","URLSearchParams","window","location","search","get","useState","setUsers","setEmailAddress","setEmailVerified","isThereError","setIsThereError","errorMessage","setErrorMessage","successMessage","setSuccessMessage","useEffect","getUsers","fetch","response","ok","Error","json","key","data","loadedUsers","push","id","email","firstName","lastName","password","emailVerified","URL","method","body","JSON","stringify","headers","isEmailVerfied","isOobCode","error","className","styles","confirmEmailWrapper","confirmEmaiContainer","badgeContainer","icon","faCheckCircle","iconCheck","titleSecondary","clarifyEmail","clarify","faCircleXmark"],"mappings":"wHACAA,EAAOC,QAAU,CAAC,oBAAsB,0CAA0C,qBAAuB,2CAA2C,aAAe,mCAAmC,eAAiB,qCAAqC,QAAU,8BAA8B,aAAe,mCAAmC,aAAe,mCAAmC,aAAe,mCAAmC,eAAiB,qCAAqC,eAAiB,qCAAqC,eAAiB,qCAAqC,UAAY,gC,2HCiLzlBC,UAzKM,WAEnB,IAAMC,EAAUC,qBAAWC,KAGrBC,EADS,IAAIC,gBAAgBC,OAAOC,SAASC,QAC5BC,IAAI,WAG3B,EAA0BC,mBAAS,IAAG,mBAAxBC,GAAF,KAAU,MACtB,EAAwBD,mBAAS,CAAC,GAAE,mBACpC,GADW,KAAS,KACQA,mBAAS,KAAG,mBACxC,GADa,KAAW,KACgBA,mBAAS,KAAG,mBAA/BE,GAAF,KAAiB,MACpC,EAA0CF,oBAAS,GAAM,mBAAnCG,GAAF,KAAkB,MAGtC,EAAwCH,oBAAS,GAAM,mBAAhDI,EAAY,KAAEC,EAAe,KACpC,EAAwCL,mBAAS,MAAK,mBAA/CM,EAAY,KAAEC,EAAe,KACpC,EAA4CP,mBAAS,MAAK,mBAAnDQ,EAAc,KAAEC,EAAiB,KAOxCC,qBAAU,WACR,IAAMC,EAAQ,iDAAG,oHACQC,MALzB,sEAK4C,KAAD,EAA3B,IAARC,EAAQ,QACAC,GAAG,CAAD,qBACR,IAAIC,MAAM,yBAAyB,KAAD,kBAEvBF,EAASG,OAAO,KAAD,EAElC,IAAWC,KAFLC,EAAI,OACJC,EAAc,GACFD,EAChBC,EAAYC,KAAK,CACfC,GAAIJ,EACJK,MAAOJ,EAAKD,GAAKK,MACjBC,UAAWL,EAAKD,GAAKM,UACrBC,SAAUN,EAAKD,GAAKO,SACpBC,SAAUP,EAAKD,GAAKQ,SACpBC,cAAeR,EAAKD,GAAKS,gBAG7BzB,EAASkB,GAAa,4CACvB,kBAlBa,mCAmBdR,GACF,GAAG,IAuFH,OAjFAD,qBAAU,WACR,IAAMpB,EAAY,iDAAG,WAAOqC,EAAKjC,GAAO,mGACfkB,MAAMe,EAAK,CAChCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBrC,QAASA,IAEXsC,QAAS,CACP,eAAgB,sBAEjB,KAAD,EAID,OAZKnB,EAAQ,QASAC,KACZT,GAAgB,GAChBE,EAAgB,8BACjB,SACkBM,EAASG,OAAO,KAAD,EAA5BE,EAAI,OACVhB,EAAgBgB,EAAKI,OACjBJ,EAAKQ,gBACPvB,EAAiBe,EAAKQ,eACtBnC,EAAQ0C,eAAef,EAAKQ,eAC5BnC,EAAQ2C,UAAUxC,GAClBW,GAAgB,GAChBI,EAAkB,gCAEhBS,EAAKiB,QACP9B,GAAgB,GAChBE,EAAgB,8BACjB,4CACF,gBA3BiB,wCA4BlBjB,EAhCA,wGAgCkCI,EACpC,GAAG,IAoDD,sBAAK0C,UAAWC,IAAOC,oBAAoB,WACvClC,GACA,sBAAKgC,UAAWC,IAAOE,qBAAqB,UAC1C,qBAAKH,UAAWC,IAAOG,eAAe,SACpC,cAAC,IAAe,CACdC,KAAMC,IACNN,UAAWC,IAAOM,cAGtB,oBAAIP,UAAWC,IAAOO,eAAe,SAAEpC,IACvC,oBAAG4B,UAAWC,IAAOQ,aAAa,iBAAMtD,EAAQ+B,MAAK,OACrD,oBAAGc,UAAWC,IAAOS,QAAQ,sDAE3B,6BAIL1C,GACC,sBAAKgC,UAAWC,IAAOE,qBAAqB,UAC1C,qBAAKH,UAAWC,IAAOG,eAAe,SACpC,cAAC,IAAe,CACdC,KAAMM,IACNX,UAAWC,IAAOM,cAGtB,oBAAIP,UAAWC,IAAOO,eAAe,SAAEtC,IACvC,oBAAG8B,UAAWC,IAAOS,QAAQ,0CAE3B,+BAMZ,C","file":"static/js/19.b6b2e39e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"confirmEmailWrapper\":\"confirmEmail_confirmEmailWrapper__8uFW8\",\"confirmEmaiContainer\":\"confirmEmail_confirmEmaiContainer__q58wR\",\"titlePrimary\":\"confirmEmail_titlePrimary__2vDXZ\",\"titleSecondary\":\"confirmEmail_titleSecondary__2MSbj\",\"clarify\":\"confirmEmail_clarify__1foUe\",\"clarifyEmail\":\"confirmEmail_clarifyEmail__1hklH\",\"errorMessage\":\"confirmEmail_errorMessage__3Xm3b\",\"errorMsgList\":\"confirmEmail_errorMsgList__ZsqzU\",\"successMessage\":\"confirmEmail_successMessage__1O2Qa\",\"successMsgList\":\"confirmEmail_successMsgList__3ywdR\",\"badgeContainer\":\"confirmEmail_badgeContainer__1daDe\",\"iconCheck\":\"confirmEmail_iconCheck__nBBxP\"};","import { useEffect, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { faCircleXmark } from \"@fortawesome/free-regular-svg-icons\";\nimport authContext from \"../Store/Auth-Context\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport styles from \"./confirmEmail.module.css\";\n\nconst ConfirmEmail = () => {\n  // Context\n  const authCtx = useContext(authContext);\n  // URL Search Params  => To get the oobCode from the URL\n  const params = new URLSearchParams(window.location.search);\n  const oobCode = params.get(\"oobCode\");\n\n  // state for the users from the database => to get the user id to update the emailVerified property in the database\n  const [users, setUsers] = useState([]);\n  const [user, setUser] = useState({});\n  const [userId, setUserId] = useState(\"\");\n  const [emailAddress, setEmailAddress] = useState(\"\");\n  const [emailVerified, setEmailVerified] = useState(false);\n\n  // state for the error and success messages\n  const [isThereError, setIsThereError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n\n  // URL To get the users from the database\n  const getUsersURL =\n    \"https://react-http-products-default-rtdb.firebaseio.com/users.json\";\n\n  // use UseEffect to get all the users from the database\n  useEffect(() => {\n    const getUsers = async () => {\n      const response = await fetch(getUsersURL);\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n      const data = await response.json();\n      const loadedUsers = [];\n      for (const key in data) {\n        loadedUsers.push({\n          id: key,\n          email: data[key].email,\n          firstName: data[key].firstName,\n          lastName: data[key].lastName,\n          password: data[key].password,\n          emailVerified: data[key].emailVerified,\n        });\n      }\n      setUsers(loadedUsers);\n    };\n    getUsers();\n  }, []);\n  // Confirm Email rest API URL\n  let EmailVerficationURL =\n    \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyDNDXcfx6jpm5Y_121TikxsU7-Yx2ZrmeQ\";\n\n  // use Effect to confirm the email and update the emailVerified property in the database to true\n  useEffect(() => {\n    const ConfirmEmail = async (URL, oobCode) => {\n      const response = await fetch(URL, {\n        method: \"POST\",\n        body: JSON.stringify({\n          oobCode: oobCode,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      if (!response.ok) {\n        setIsThereError(true);\n        setErrorMessage(\"Email Verification Failed\");\n      }\n      const data = await response.json();\n      setEmailAddress(data.email);\n      if (data.emailVerified) {\n        setEmailVerified(data.emailVerified);\n        authCtx.isEmailVerfied(data.emailVerified);\n        authCtx.isOobCode(oobCode);\n        setIsThereError(false);\n        setSuccessMessage(\"Email Verified Successfully\");\n      }\n      if (data.error) {\n        setIsThereError(true);\n        setErrorMessage(\"Email Verification Failed\");\n      }\n    };\n    ConfirmEmail(EmailVerficationURL, oobCode);\n  }, []);\n\n  \n  // // get the user who has the same email address as the email address in the response from the confirm email rest API\n  // useEffect(() => {\n  //   const getUserKey = async (users, emailAddress) => {\n  //     const user = users.find((user) => user.email === emailAddress);\n  //     setUser(user);\n\n  //     console.log(\"user\", user);\n  //     if (user) {\n  //       setUserId(user.id);\n  //     }\n  //   };\n  //   getUserKey(users, emailAddress);\n  //   // filter the users to get all the users except the user who has the same email address as the email address in the response from the confirm email rest API\n  //   const filteredUsers = users.filter((user) => user.email !== emailAddress);\n  //   // update the emailVerified property in the database to true\n  //   const updateEmailVerified = async (userId) => {\n  //     const response = await fetch(\n  //       `https://react-http-products-default-rtdb.firebaseio.com/users.json`,\n  //       {\n  //         method: \"PUT\",\n  //         body: JSON.stringify({\n  //           ...filteredUsers,\n  //           [userId]: {\n  //             ID: Math.random().toString() ,\n  //             firstName: user.firstName,\n  //             lastName: user.lastName,\n  //             email: user.email,\n  //             password: user.password,\n  //             emailVerified: emailVerified,\n  //           },\n  //         }),\n  //         headers: {\n  //           \"Content-Type\": \"application/json\",\n  //         },\n  //       }\n  //     );\n  //     console.log(\"Respone from updateEmailVerified\", response);\n  //     if (!response.ok) {\n  //       throw new Error(\"Something went wrong!\");\n  //     }\n  //     const data = await response.json();\n  //     console.log(\"Data from updateEmailVerified\", data);\n  //   };\n  //   updateEmailVerified(userId);\n  // }, [emailAddress, users, user, userId, emailVerified]);\n\n  // console.log(\"users\", users);\n\n  return (\n    <div className={styles.confirmEmailWrapper}>\n      {!isThereError && (\n        <div className={styles.confirmEmaiContainer}>\n          <div className={styles.badgeContainer}>\n            <FontAwesomeIcon\n              icon={faCheckCircle}\n              className={styles.iconCheck}\n            />\n          </div>\n          <h1 className={styles.titleSecondary}>{successMessage}</h1>\n          <p className={styles.clarifyEmail}>for {authCtx.email} </p>\n          <p className={styles.clarify}>\n            You can now sign in with your new account\n            <br />\n          </p>\n        </div>\n      )}\n      {isThereError && (\n        <div className={styles.confirmEmaiContainer}>\n          <div className={styles.badgeContainer}>\n            <FontAwesomeIcon\n              icon={faCircleXmark}\n              className={styles.iconCheck}\n            />\n          </div>\n          <h1 className={styles.titleSecondary}>{errorMessage}</h1>\n          <p className={styles.clarify}>\n            Try Again or Contact Support!\n            <br />\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ConfirmEmail;\n"],"sourceRoot":""}